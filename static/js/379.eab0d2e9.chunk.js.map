{"version":3,"file":"static/js/379.eab0d2e9.chunk.js","mappings":"6OAGaA,EAAYC,EAAAA,GAAAA,GAAH,uJASTC,EAAYD,EAAAA,GAAAA,IAAH,oCAITE,EAAYF,EAAAA,GAAAA,IAAH,wCAITG,EAAWH,EAAAA,GAAAA,IAAH,wCAIRI,GAAOJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,kM,2BCiBjB,EAnCyB,WAAO,IAAD,IAC7B,GAAgCM,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACJE,GAAQC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,MACTC,EAAY,iBAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAUG,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAO9C,OALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcV,GAASW,MAAK,SAACC,GAC7Bb,EAAYa,QACX,CAACZ,KAGF,iCACE,mBAAQa,QAAS,WACbX,EAAMI,IACLQ,QAAQ,YAAYC,GAAI,CAACC,GAAI,QAFlC,mBAGA,SAAC1B,EAAD,UAAYQ,EAASmB,kBACrB,UAACxB,EAAD,WACGK,EAASoB,aAAc,SAAC1B,EAAD,CAAW2B,IArBxB,kCAqB0CrB,EAASoB,YAAaE,IAAI,MAAQ,SAAC5B,EAAD,CAAW2B,IAAI,2EAA2EC,IAAI,MACrL,4BACE,UAAC1B,EAAD,YAAU,uCAAoBI,EAASuB,aACvC,UAAC3B,EAAD,YAAU,2CAAwBI,EAASwB,iBAC3C,UAAC5B,EAAD,YAAU,2CAAwBI,EAASyB,uBAG/C,SAAC5B,EAAD,CAAM6B,GAAG,OAAOjB,MAAO,CAAEC,KAAMF,GAA/B,mBACA,SAACX,EAAD,CAAM6B,GAAG,UAAUjB,MAAO,CAAEC,KAAMF,GAAlC,sBACA,SAAC,EAAAmB,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,CAAQC,QAAS,CAAC7B,Y,oICjCpB8B,EAAU,gCACVC,EAAM,mCAECC,EAAgB,mCAAG,+FACtBC,EAAO,IAAIC,gBAAgB,CAC7BC,QAASJ,EACTK,KAAM,IAHkB,SAMLC,MAAM,GAAD,OAAIP,EAAJ,8BAAiCG,IANjC,cAMtBK,EANsB,gBAOJA,EAASC,OAPL,cAOtBC,EAPsB,yBAQrBA,GARqB,2CAAH,qDAWhBC,EAAc,mCAAG,WAAOC,EAAaC,GAApB,kFACrBD,EADqB,wDAEpBE,EAFoB,UAEZ,IAAIV,gBAAgBS,GAAQE,IAAI,gBAFpB,QAEgC,GACpDZ,EAAO,IAAIC,gBAAgB,CAC7BC,QAASJ,EACTK,KAAM,EACNQ,MAAAA,EACAE,eAAe,IAPO,SASVT,MAAM,GAAD,OAAIP,EAAJ,wBAA2BG,IATtB,cASpBc,EAToB,gBAUVA,EAAER,OAVQ,cAUpBzB,EAVoB,yBAWnBA,GAXmB,4CAAH,wDAcdF,EAAa,mCAAG,WAAOoC,GAAP,kFACnBf,EAAO,IAAIC,gBAAgB,CAC7BC,QAASJ,IAFY,SAITM,MAAM,GAAD,OAAIP,EAAJ,iBAAoBkB,EAApB,YAA0Bf,EAA1B,wCAJI,cAInBc,EAJmB,gBAKTA,EAAER,OALO,cAKnBzB,EALmB,yBAMlBA,GANkB,2CAAH","sources":["components/MovieDetailsPage/MovieDetailsPage.styled.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx","views/fetchAPI.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from 'react-router-dom';\n\nexport const TitleFilm = styled.h1`\ncolor: #2e2e33;\ndisplay: flex;\njustify-content: center;\nmargin-bottom: 20px;\nbackground-color: #1717ad21;\npadding: 10px;\n`\n\nexport const BigPoster = styled.img`\nmargin: 0;\n`\n\nexport const BoxPoster = styled.div`\ndisplay: flex;\n`\n\nexport const Overview = styled.div`\npadding: 15px;\n`\n\nexport const Link = styled(NavLink)`\n  display: inline-block;\n  text-decoration: none;\n  padding: 12px;\n  font-weight: 500;\n  color: #2a363b;\n  font-size: 18px;\n  &.active {\n    color: #2196f3;\n  }\n`;\n","import { useState, useEffect, Suspense } from 'react'\nimport { TitleFilm, BigPoster, BoxPoster, Overview, Link } from './MovieDetailsPage.styled'\nimport { useParams, useNavigate, Outlet, useLocation } from 'react-router-dom' \nimport { findFilmsInfo } from 'views/fetchAPI';\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w300';\n\nconst MovieDetailsPage = () => {\n  const [filmInfo, setFilmInfo] = useState({})\n  const { movieId } = useParams()\n  let navig = useNavigate()\n  let location = useLocation()\n  const verification = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    findFilmsInfo(movieId).then((r)=>{\n    setFilmInfo(r)})\n  }, [movieId])\n\n  return (\n    <>\n      <button onClick={() => {\n          navig(verification);\n        }} variant='contained' sx={{mb: '10px'}}>Back</button>\n      <TitleFilm>{filmInfo.original_title}</TitleFilm>\n      <BoxPoster>\n        {filmInfo.poster_path ? <BigPoster src={imgBaseUrl + filmInfo.poster_path} alt=\"\" /> : <BigPoster src='https://www.jakartaplayers.org/uploads/1/2/5/5/12551960/2297419_orig.jpg' alt=\"\" />}\n        <div>\n          <Overview><h3>Overview: </h3>{filmInfo.overview}</Overview>\n          <Overview><h3>Release date: </h3>{filmInfo.release_date}</Overview>\n          <Overview><h3>Vote average: </h3>{filmInfo.vote_average}</Overview>\n        </div>\n      </BoxPoster>\n      <Link to='cast' state={{ from: verification }}>cast</Link>\n      <Link to='reviews' state={{ from: verification }}>reviews</Link>\n      <Suspense fallback={<h1>Wite one more...</h1>}>\n        <Outlet context={[filmInfo]} />\n      </Suspense>\n      </>\n  )\n}\n\nexport default MovieDetailsPage","// https://api.themoviedb.org/3/movie/550?api_key=8b3a5753880e240f0b2ef7fb5ea89df3\n\nconst baseUrl = \"https://api.themoviedb.org/3/\";\nconst KEY = 'c4ff5df06d9c3bc212d0ff99e5222626';\n\nexport const findPopularFilms = async () => {\n    const meta = new URLSearchParams({\n        api_key: KEY,\n        page: 1,\n    });\n\n    const fetchAPI = await fetch(`${baseUrl}trending/movie/day?${meta}`)\n    const returnAPI = await fetchAPI.json()\n    return returnAPI;\n}\n\nexport const findFilmsTitle = async (searchQuery, search) => {\n    if (!searchQuery) return;\n    const query = new URLSearchParams(search).get('query') ?? ''; \n    const meta = new URLSearchParams({\n        api_key: KEY,\n        page: 1,\n        query, \n        include_adult: false,\n    });\n    const f = await fetch(`${baseUrl}search/movie?${meta}`)\n    const r = await f.json()\n    return r\n}\n\nexport const findFilmsInfo = async (id) => {\n    const meta = new URLSearchParams({\n        api_key: KEY,\n    });\n    const f = await fetch(`${baseUrl}movie/${id}?${meta}&append_to_response=credits,reviews`)\n    const r = await f.json()\n    return r\n}"],"names":["TitleFilm","styled","BigPoster","BoxPoster","Overview","Link","NavLink","useState","filmInfo","setFilmInfo","movieId","useParams","navig","useNavigate","location","useLocation","verification","state","from","useEffect","findFilmsInfo","then","r","onClick","variant","sx","mb","original_title","poster_path","src","alt","overview","release_date","vote_average","to","Suspense","fallback","context","baseUrl","KEY","findPopularFilms","meta","URLSearchParams","api_key","page","fetch","fetchAPI","json","returnAPI","findFilmsTitle","searchQuery","search","query","get","include_adult","f","id"],"sourceRoot":""}